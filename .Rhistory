install.packages("tidyverse")
# Small youtube video clustering algorithm
library(tidyverse)
install.packages("readxl")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("cluster")
setwd("C:/Git/Youtube video clustering")
# Set the working directory to where your file is located
setwd("C:/Git/Youtube video clustering")
# Read the data from an Excel file
data <- read_excel("Fantasy_ASMR_last_90_days_videos.xlsx")
library(readxl)
# Read the data from an Excel file
data <- read_excel("Fantasy_ASMR_last_90_days_videos.xlsx")
# Set the max number of clusters to test
max_k <- 10
# Create empty vector to store results
results <- vector("list", max_k)
# Run clustering algorithm for each k
for (k in 1:max_k) {
# Run k-means clustering
kmeans_result <- kmeans(data, centers = k)
# Store result in results vector
results[[k]] <- kmeans_result
}
# Test the data for Na's
(is.na(data))
View(data)
str(data)
View(data)
# Read the data
raw.data <- read_excel("Fantasy_ASMR_last_90_days_videos.xlsx")
# delete the first row
raw.data <- slice(raw.data, -1)
install.packages("dplyr")
library(dplyr)
# delete the first row
raw.data <- slice(raw.data, -1)
View(raw.data)
# Test the data for Na's
na <- is.na(raw.data)
# Test the data for Na's and remove them
nrow(raw.data)
data <- na.omit(raw.data)
nrow(data)
# Run clustering algorithm for each k
for (k in 1:max_k) {
# Run k-means clustering
kmeans_result <- kmeans(data, centers = k)
# Store result in results vector
results[[k]] <- kmeans_result
}
# delete unnecessary attributes for clustering
raw.data <- my_data[, -c(1, 3, 5)]
# delete unnecessary attributes for clustering
raw.data <- raw.data[, -c(1, 3, 5)]
# Test the data for Na's and remove them
nrow(raw.data)
data <- na.omit(raw.data)
nrow(data)
# Set the max number of clusters to test
max_k <- 10
# Create empty vector to store results
results <- vector("list", max_k)
# Run clustering algorithm for each k
for (k in 1:max_k) {
# Run k-means clustering
kmeans_result <- kmeans(data, centers = k)
# Store result in results vector
results[[k]] <- kmeans_result
}
sum(is.na(data))
# Run k-means clustering
kmeans_result <- kmeans(data, centers = 3)
View(data)
# Read the data
raw.data <- read_excel("Fantasy_ASMR_last_90_days_videos.xlsx")
# Read the data
raw.data <- read_excel("Fantasy_ASMR_last_90_days_videos.xlsx")
# delete the first row
raw.data <- slice(raw.data, -1)
# delete unnecessary attributes for clustering
raw.data <- raw.data[, -c(1, 2, 3)]
# Test the data for Na's and remove them
nrow(raw.data)
data <- na.omit(raw.data)
nrow(data)
# Set the max number of clusters to test
max_k <- 10
# Create empty vector to store results
results <- vector("list", max_k)
# Run clustering algorithm for each k
for (k in 1:max_k) {
# Run k-means clustering
kmeans_result <- kmeans(data, centers = k)
# Store result in results vector
results[[k]] <- kmeans_result
}
str(data)
install.packages("lubridate")
library(lubridate)
# Convert chr attribute holding average play duration
raw.data[,6] <- as.numeric(hms(raw.data[,6]))
# Read the data
raw.data <- read_excel("Fantasy_ASMR_last_90_days_videos.xlsx")
# delete the first row
raw.data <- slice(raw.data, -1)
# delete unnecessary attributes for clustering
raw.data <- raw.data[, -c(1, 2, 3)]
# Test the data for Na's and remove them
nrow(raw.data)
raw.data <- na.omit(raw.data)
nrow(data)
install.packages("hms")
library(hms)
# Set the working directory to where your file is located
setwd("C:/Git/Youtube video clustering")
# Read the data
raw.data <- read_excel("Fantasy_ASMR_last_90_days_videos.xlsx")
# delete the first row
raw.data <- slice(raw.data, -1)
# delete unnecessary attributes for clustering
raw.data <- raw.data[, -c(1, 2, 3)]
# Test the data for Na's and remove them
nrow(raw.data)
raw.data <- na.omit(raw.data)
nrow(data)
# Convert chr attribute holding average play duration
raw.data[,6] <- as.numeric(hms(raw.data[,6]))
# Convert chr attribute holding average play duration
raw.data[,6] <- as.numeric(as.hms(raw.data[,6]))
# Convert chr attribute holding average play duration
raw.data[,6] <- as.numeric(as_hms(raw.data[,6]))
str(raw.data)
# Delete spaces in column-names
colnames(raw.data) <- gsub("\\s", "_", colnames(raw.data))
# Convert chr attribute holding average play duration
raw.data$`Kom­men­ta­re_hin­zu­ge­fügt` <- as.numeric(as_hms(raw.dataraw.data$`Kom­men­ta­re_hin­zu­ge­fügt`))
# Convert chr attribute holding average play duration
raw.data$`Kom­men­ta­re_hin­zu­ge­fügt` <- as.numeric(as_hms(raw.data$`Kom­men­ta­re_hin­zu­ge­fügt`))
# Convert chr attribute holding average play duration
raw.data$Kommentare_hinzugefügt <- as.numeric(as_hms(raw.data$Kommentare_hinzugefügt))
# Convert chr attribute holding average play duration
raw.data$`Durch­schnitt­li­che_Wie­der­ga­be­dau­er` <- as.numeric(as_hms(raw.data$`Durch­schnitt­li­che_Wie­der­ga­be­dau­er`))
# Create final data-set
data <- raw.data
# Set the max number of clusters to test
max_k <- 10
# Create empty vector to store results
results <- vector("list", max_k)
# Run clustering algorithm for each k
for (k in 1:max_k) {
# Run k-means clustering
kmeans_result <- kmeans(data, centers = k)
# Store result in results vector
results[[k]] <- kmeans_result
}
# Plot elbow curve
fviz_nbclust(data, kmeans, method = "wss") +
ggtitle("Elbow curve for k-means clustering") +
xlab("Number of clusters") +
ylab("Within-cluster sum of squares")
Install.packages("facroextra")
Install.packages("factoextra")
install.packages("factoextra")
library(factoextra)
# Plot elbow curve
fviz_nbclust(data, kmeans, method = "wss") +
ggtitle("Elbow curve for k-means clustering") +
xlab("Number of clusters") +
ylab("Within-cluster sum of squares")
# Run again with optimal k-value
opt_k <- 4
set.seed(123)
clusters <- kmeans(data, centers = opt_k)
# Function for wss plot
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss
}
# Call function
wssplot(data)
# Run again with optimal k-value
opt_k <- 4
set.seed(123)
clusters <- kmeans(data, centers = opt_k)
# Create new attribute with cluster numbers
data$cluster <- clusters$cluster
# Read the data
read.data <- read_excel("Fantasy_ASMR_last_90_days_videos.xlsx")
# Set the working directory to where your file is located
setwd("C:/Git/Youtube video clustering")
# Read the data
read.data <- read_excel("Fantasy_ASMR_last_90_days_videos.xlsx")
# Delete spaces in column-names
colnames(read.data) <- gsub("\\s", "_", colnames(read.data))
# Make data wrangling data-set
raw.data <- read.data
# delete the first row
raw.data <- slice(raw.data, -1)
# delete unnecessary attributes for clustering
raw.data <- raw.data[, -c(1, 2, 3)]
# Test the data for Na's and remove them
nrow(raw.data)
raw.data <- na.omit(raw.data)
nrow(data)
# Convert chr attribute holding average play duration
raw.data$`Durch­schnitt­li­che_Wie­der­ga­be­dau­er` <- as.numeric(as_hms(raw.data$`Durch­schnitt­li­che_Wie­der­ga­be­dau­er`))
# Create final data-set
data <- raw.data
# Function for wss plot
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss
}
# Call function
wssplot(data)
# Run again with optimal k-value
opt_k <- 4
set.seed(123)
clusters <- kmeans(data, centers = opt_k)
# Create new attribute with cluster numbers
data$cluster <- clusters$cluster
#Add the three attributes again
data$`Vi­de­os` <- read.data$`Vi­de­os`
# Set the working directory to where your file is located
setwd("C:/Git/Youtube video clustering")
# Read the data
read.data <- read_excel("Fantasy_ASMR_last_90_days_videos.xlsx")
# Test the data for Na's and remove them
nrow(read.data)
read.data <- na.omit(read.data)
nrow(read.data)
# Delete spaces in column-names
colnames(read.data) <- gsub("\\s", "_", colnames(read.data))
# Create data-wrangling data-set
raw.data <- read.data
# delete the first row
raw.data <- slice(raw.data, -1)
# delete unnecessary attributes for clustering
raw.data <- raw.data[, -c(1, 2, 3)]
# Convert chr attribute holding average play duration
raw.data$`Durch­schnitt­li­che_Wie­der­ga­be­dau­er` <- as.numeric(as_hms(raw.data$`Durch­schnitt­li­che_Wie­der­ga­be­dau­er`))
# Create final data-set
data <- raw.data
# Function for wss plot
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss
}
# Call function
wssplot(data)
# Run again with optimal k-value
opt_k <- 4
set.seed(123)
clusters <- kmeans(data, centers = opt_k)
# Create new attribute with cluster numbers
data$cluster <- clusters$cluster
#Add the three attributes again
data$`Vi­de­os` <- read.data$`Vi­de­os`
# delete the first row
read.data <- slice(read.data, -1)
# Create data-wrangling data-set
raw.data <- read.data
# delete unnecessary attributes for clustering
raw.data <- raw.data[, -c(1, 2, 3)]
# Convert chr attribute holding average play duration
raw.data$`Durch­schnitt­li­che_Wie­der­ga­be­dau­er` <- as.numeric(as_hms(raw.data$`Durch­schnitt­li­che_Wie­der­ga­be­dau­er`))
# Create final data-set
data <- raw.data
# Function for wss plot
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss
}
# Call function
wssplot(data)
# Run again with optimal k-value
opt_k <- 4
set.seed(123)
clusters <- kmeans(data, centers = opt_k)
# Create new attribute with cluster numbers
data$cluster <- clusters$cluster
#Add the three attributes again
data$`Vi­de­os` <- read.data$`Vi­de­os`
data$`Vi­deo­ti­tel` <- read.data$`Vi­deo­ti­tel`
data$`Ver­öf­fent­li­chungs­zeit­punkt_des_Vi­de­os` <- read.data$`Ver­öf­fent­li­chungs­zeit­punkt_des_Vi­de­os`
View(read.data)
